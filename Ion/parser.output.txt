(n (sizeof-type (array (ptr int) 16)))
(n (sizeof-expr (+ 1 2)))
(var x nil (? (== b 1) (+ 1 2) (- 3 4)))
(func fact ( n int ) int
  (block
    (trace "fact")
    (if (== n 0)
      (block
        (return 1))
      else 
      (block
        (return (* n (fact (- n 1))))))))
(func fact ( n int ) int
  (block
    (:= p 1)
    (for (:= i 1)(<= i n)(++ i)
      (block
        (*= p i)))
    (return p)))
(var foo nil (? a (&& (== (+ (+ (& a b) (<< c d)) (* e f)) (+ (+ (- (- (+ u) v) w) (/ (* g) (h x y))) (% (- i) (index k x)))) (<= m (/ (* n (+ p q)) r))) 0))
(func f ( x int ) bool
  (block
    (switch x
      (case ( 0 1 ) 
        (block
          (return true))
      (case ( default 2 ) 
        (block
          (return false)))))
(enum Color
  (RED 3)
  (GREEN nil)
  (BLUE 0))
(pi 3.14)
(struct Vector
  (float x y))
(var v nil (compound Vector 1 (- 1)))
(var v Vector (compound nil 1 (- 1)))
(union IntOrFloat
  (int i)
  (float f))
(typedef Vectors (array Vector (+ 1 2)))
(func f ( ) nil
  (block
    (do-while 1
      (block
        (print 42)))))
(typedef T (array (func ( int ) int) 16))
(func f ( ) nil
  (block
    (enum E
      (A nil)
      (B nil)
      (C nil))
    (return)))
(func f ( ) nil
  (block
    (if 1
      (block
        (return 1))
      elseif 2
      (block
        (return 2))
      else 
      (block
        (return 3)))))
